"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.activate=void 0;var _markdownYamlMetadataParser=_interopRequireDefault(require("markdown-yaml-metadata-parser"));var _liquidjs=require("liquidjs");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const DEFAULT_NOTE_TAG="Default";const getDefaultNoteTemplate=async()=>{const{notes,tags:tags1}=inkdrop.store.getState();try{const defaultTag=tags1.all.find(({name})=>name===DEFAULT_NOTE_TAG);const defaultTagId=defaultTag._id;const defaultNote=notes.items.find(({tags})=>tags.includes(defaultTagId));const{metadata,content}=(0,_markdownYamlMetadataParser).default(defaultNote.body);const engine=new _liquidjs.Liquid();const now=new Date();const title=await engine.parseAndRender(metadata.title,{...metadata,now});const body=await engine.parseAndRender(content.trim(),{...metadata,title,now});return{...defaultNote,title,body}}catch(err){return err}};const createNewNoteFromTemplate=async template=>{const db=inkdrop.main.dataStore.getLocalDB();const note={...template,_id:db.notes.createId(),_rev:undefined,tags:[],createdAt:+new Date(),updatedAt:+new Date()};await db.notes.put(note);inkdrop.commands.dispatch(document.body,"core:open-note",{noteId:note._id});inkdrop.commands.dispatch(document.body,"editor:focus-mde")};const activate=()=>{inkdrop.commands.add(document.body,"custom:new-note-from-default",async()=>{getDefaultNoteTemplate().then(async template=>{await createNewNoteFromTemplate(template)}).catch(()=>{console.log("Cannot find default note");inkdrop.commands.dispatch(document.body,"core:new-note")})})};exports.activate=activate